<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>用唇语说colorful的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Savingss.github.io/"/>
  <updated>2017-09-15T06:48:36.093Z</updated>
  <id>http://Savingss.github.io/</id>
  
  <author>
    <name>黄智鹏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS的几种排序算法</title>
    <link href="http://Savingss.github.io/2017/09/15/JS%E7%AE%97%E6%B3%95/"/>
    <id>http://Savingss.github.io/2017/09/15/JS算法/</id>
    <published>2017-09-15T06:46:21.168Z</published>
    <updated>2017-09-15T06:48:36.093Z</updated>
    
    <content type="html"><![CDATA[<pre><code>var ary = [12,2,36,80,99,56,68],ary2 = [1,2,3,4,5,6,7],n = 0;快速查询：function quickSort(ary){  if (ary&lt;=1) {    return ary;  }  var mid_ind = Math.floor(ary.length/2);  var mid = ary.splice(mid_ind,1);  var left = [],right = [];  for (var i = 0; i &lt; ary.length; i++) {    var cur = ary[i];    if (cur&lt;mid[0]) {      left.push(cur)    }else {      right.push(cur)    }  }  return quickSort(left).concat(mid,quickSort(right));}var newArry = quickSort(ary);冒泡排序：function bubble(ary){  var flag = true;  优化代码部分：添加一个flag判断如果一开始数组就已经是排好序的话，减少循环次数，提升性能。  for (var j = 0; j &lt; ary.length-1; j++) {    for (var i = 0; i &lt; ary.length-1-j; i++) {      n++; 测试循环次数，一开始在全局下定义n的值为0，方法执行之后输出n的次数即可完成测试      if (ary[i]&gt;ary[i+1]) {        var temp = ary[i];        ary[i] = ary[i+1];        ary[i+1] = temp;        flag = false;      }    }    优化代码部分：添加一个flag判断如果一开始数组就已经是排好序的话，减少循环次数，提升性能。    if (flag) {      return ary;    }  }  return ary;}console.log(bubble(ary2));console.log(n);插入排序法：function insertSort(ary){  var newArry = [];  newArry[0] = ary[0];  将原数组中的每一项依次和新数组中的值进行比较,如果比他小,就放到该项的前面  for (var i = 0; i &lt; ary.length; i++) {    依次和新数组进行对比    for (var j = 0; j &lt; newArry.length; j++) {      if (ary[i]&lt;newArry[j]) {        newArry.splice(j,0,ary[i]);        break;      }else {        如果j等于新数组的长度-1的话，说明已经和前面都比完，并且是最大的        if (j===newArry.length-1) {          newArry.push(ary[i]);          break;        }      }    }  }  return newArry;}console.log(insertSort(ary));利用递归计算1到100的和,递归就是函数自己调用自己，损耗性能。function sum(n){  if (n&lt;=1) {    return n;  }  return n+sum(n-1);}console.log(sum(100));</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;var ary = [12,2,36,80,99,56,68],ary2 = [1,2,3,4,5,6,7],n = 0;
快速查询：
function quickSort(ary){
  if (ary&amp;lt;=1) {
    return ary;
 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS常用正则</title>
    <link href="http://Savingss.github.io/2017/09/15/JS%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99/"/>
    <id>http://Savingss.github.io/2017/09/15/JS常用正则/</id>
    <published>2017-09-14T16:48:40.295Z</published>
    <updated>2017-09-14T16:52:05.894Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//用户名正则，4到16位（字母，数字，下划线，减号）</div><div class="line">var uPattern = /^[a-zA-Z0-9_-]&#123;4,16&#125;$/;</div><div class="line">//输出 true</div><div class="line">console.log(uPattern.test(&quot;iFat3&quot;));</div></pre></td></tr></table></figure></li><li><p>密码强度正则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</div><div class="line">var pPattern = /^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/;</div><div class="line">//输出 true</div><div class="line">console.log(&quot;==&quot;+pPattern.test(&quot;iFat3#&quot;));</div><div class="line">// 必须由数字和字母组成的至少6位密码</div><div class="line">var regpwd = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,21&#125;$/;</div></pre></td></tr></table></figure></li><li><p>Email</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//Email正则</div><div class="line">var ePattern = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/;</div><div class="line">//输出 true</div><div class="line">console.log(ePattern.test(&lt;a href=&quot;mailto:65974040@qq.com&quot;&gt;65974040@qq.com&lt;/a&gt;));</div></pre></td></tr></table></figure></li><li><p>手机号正则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//手机号正则</div><div class="line">var mPattern = /^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d&#123;8&#125;$/;</div><div class="line">//输出 true</div><div class="line">console.log(mPattern.test(&quot;18600000000&quot;));</div></pre></td></tr></table></figure></li><li><p>身份证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//身份证号（18位）正则</div><div class="line">var cP = /^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/;</div><div class="line">//输出 true</div><div class="line">console.log(cP.test(&quot;11010519880605371X&quot;));</div></pre></td></tr></table></figure></li><li><p>日期正则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//日期正则，简单判定,未做月份及日期的判定</div><div class="line">var dP1 = /^\d&#123;4&#125;(\-)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/;</div><div class="line">//输出 true</div><div class="line">console.log(dP1.test(&quot;2017-05-11&quot;));</div><div class="line">//输出 true</div><div class="line">console.log(dP1.test(&quot;2017-15-11&quot;));</div><div class="line">//日期正则，复杂判定</div><div class="line">var dP2 = /^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/;</div><div class="line">//输出 true</div><div class="line">console.log(dP2.test(&quot;2017-02-11&quot;));</div><div class="line">//输出 false</div><div class="line">console.log(dP2.test(&quot;2017-15-11&quot;));</div><div class="line">//输出 false</div><div class="line">console.log(dP2.test(&quot;2017-02-29&quot;));</div></pre></td></tr></table></figure></li><li><p>扣扣号码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//QQ号正则，5至11位</div><div class="line">var qqPattern = /^[1-9][0-9]&#123;4,10&#125;$/;</div><div class="line">//输出 true</div><div class="line">console.log(qqPattern.test(&quot;65974040&quot;));</div></pre></td></tr></table></figure></li><li><p>包含中文正则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//包含中文正则</div><div class="line">var cnPattern = /[\u4E00-\u9FA5]/;</div><div class="line">//输出 true</div><div class="line">console.log(cnPattern.test(&quot;42度&quot;));</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;用户名&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;di
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6（ECMAScript 6）基础</title>
    <link href="http://Savingss.github.io/2017/09/13/ES6%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://Savingss.github.io/2017/09/13/ES6基础笔记/</id>
    <published>2017-09-13T12:07:04.761Z</published>
    <updated>2017-09-13T12:12:00.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在es6中是用let声明变量的 跟var类似 跟var的区别在于let只在它的代码块中有效<br>一个大括号 就是一个代码块==&gt;作用域 在es5中 代码块中声明的变量在任何地方都能取到<br>let 的应用场景一般是用在for循环中比较有用 不能变量提升<br>使用let 注意事项 1.不能重复声明<br>使用const 声明变量 只能声明常量 一旦声明 不能改变，只在代码块中有效。例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const PI = 3.141569；</div><div class="line">const PI = 3.14;//此时会报错为：它不是一个常量</div></pre></td></tr></table></figure><p>let的经典面试题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">一个for循环，用var声明一个变量，然后要我输入几就打印几</div><div class="line">var arr = [];</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">arr[i] = function () &#123;</div><div class="line">console.log(i);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">arr[6](); //此时输出10</div><div class="line"></div><div class="line">应该把for循环里面的var改为let，让let解决变量提升，不能让它变量提升，利用let的特性就是它只在它的代码块有效</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const PI = 3.1415982;</div><div class="line">PI = 3.14;//报错：Uncaught TypeError: Assignment to constant variable.说明PI不是一个常量</div></pre></td></tr></table></figure><blockquote><p>const声明的变量 只在代码块会中有效</p></blockquote><pre><code>{        const a = 123;}console.log(a);//a is not definevar arr = Array.prototype.slice.call(arguments)</code></pre><blockquote><p>变量的解构赋值<br>es6中允许按照一定的模式,将数组和对象中的值,对变量进行赋值,这被称为解构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">完全解构：</div><div class="line">var [a,b,c] = [1,2,3];</div><div class="line">不完全解构：</div><div class="line">var [a,,c] = [1,2,3];</div></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">对象的赋值</div><div class="line">var &#123;x1,x2,y1&#125; = &#123;x1:1,y1:2,x2:3&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">数组跟对象结合</div><div class="line">var [&#123;x1,y1,z1&#125;,[x2,y2,z2],x3,z3] = [&#123;z5:10,y1:20&#125;,[30,40],50]</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">对象扩展运算符 使用三个点</div><div class="line">var [head,...detail] = [1,2,23];</div><div class="line">detail打印出来的是[2,23]；</div><div class="line">arguments对象不是一个 Array 。它类似于数组，但除了 长度之外没有任何数组属性。例如，它没有 pop 方法。但是它可以被转换为一个真正的数组</div><div class="line">es6中有两种方法可以把arguments转化为数组</div><div class="line">spread扩展符就是三个点...例如：</div><div class="line">function show(...argments)&#123;</div><div class="line">console.log(arguments);</div><div class="line">&#125;</div><div class="line">function show(...argments)&#123;</div><div class="line">var arr = Array.from(arguments);</div><div class="line">console.log(arr);</div><div class="line">&#125;</div><div class="line">show(&apos;啊锐&apos;,&apos;阿荣&apos;,&apos;振诚&apos;,&apos;庆秋&apos;)</div></pre></td></tr></table></figure><blockquote><p>字符串模板</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var  a = 1;</div><div class="line">var  b = 2;</div><div class="line">es5写法：</div><div class="line">// var str = &quot;asfdasdasd&quot;+a+&quot;dasdasdasd&quot;+b;</div><div class="line">// console.log(str);</div><div class="line"></div><div class="line">// 模板字符串  是esc下面那个键</div><div class="line">var str1 = `asfdasdas$&#123;a&#125;dadasdasdasd$&#123;b&#125;b`</div><div class="line">console.log(str1);</div><div class="line"></div><div class="line">应用场景（小demo）：动态添加</div><div class="line">var imgSrc = &apos;./1.png&apos;;</div><div class="line">var title = &apos;我是一个h2&apos;;</div><div class="line"></div><div class="line">$(&apos;ul&apos;).append(`</div><div class="line">&lt;li&gt;</div><div class="line">&lt;h2&gt;$&#123;title&#125;&lt;/h2&gt;</div><div class="line">&lt;img src=$&#123;imgSrc&#125; alt=&quot;&quot;&gt;</div><div class="line">&lt;/li&gt;</div><div class="line">`)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">数组赋值</div><div class="line">Es5：</div><div class="line">var arr1 = [1,2,3,4];</div><div class="line">var arr2 = [];</div><div class="line">for(var i = 0;i &lt;arr1.length;i++)&#123;</div><div class="line">arr2.push(arr1[i]);</div><div class="line">&#125;</div><div class="line">console.log(arr2);</div><div class="line">Es6：</div><div class="line">var arr1 = [1,2,3,4];</div><div class="line">var newarr = Array.from(arr1);</div><div class="line">console.log(newarr);</div><div class="line">也可以使用扩展运算符,三个点...</div><div class="line">var arr1 = [1,2,3];</div><div class="line">var newarr = [...arr1];</div><div class="line">console.log(newarr);</div></pre></td></tr></table></figure><blockquote><p>注意：两个数组之间不能直接比较无论是“==”或者“===”都会返回false。<strong>因为JavaScript里面Array是对象，==或===操作符只能比较两个对象是否是同一个实例，也就是是否是同一个对象引用。目前JavaScript没有内置的操作符判断对象的内容是否相同。</strong>只能通过遍历数组元素比较。</p><p>map和for-of</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">map  在 es6中能去遍历数组和对象的对象 ,叫map对象</div><div class="line"></div><div class="line">第一步 创建map对象</div><div class="line">var person = &#123;</div><div class="line">name:&apos;黄智鹏&apos;,</div><div class="line">age:18,</div><div class="line">fav:function()&#123;</div><div class="line">console.log(&apos;英语&apos;)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">var map = new Map();</div><div class="line">console.log(map);</div><div class="line">设置map对象  使用set方法</div><div class="line">var ar =[10,20];</div><div class="line"></div><div class="line">map的key值可以是对象也可以是字符串，数组；JavaScript的对象（Objetct），本质上是键值对的集合（Hash结构），但是传统上只能用字符串当做键。</div><div class="line">这就给他的使用带来了很大的限制、。为了解决这个问题ES6提供了Map数据结构它类似与对象，也是键值对集合，但是&apos;键&apos;的范围不限于字符串，</div><div class="line">各种类型的值（包括对象）都可以当做键。也就是说，Object结构提供了字符“串——值”的对应，Map结构提供了“值-值”的对应，</div><div class="line">是一种更完善的Hash结构实现。如果你需要键值对的结构，Map比Object更合适。</div><div class="line"></div><div class="line">map.set(person,1);</div><div class="line">map.set(&apos;b&apos;,2);</div><div class="line">map.set(&apos;c&apos;,3);</div><div class="line"></div><div class="line">var a = map.get(&apos;a&apos;)</div><div class="line">console.log(a);</div><div class="line">has()返回一个布尔值 如果有 则返回true</div><div class="line">console.log(map.has(&apos;c&apos;));</div><div class="line">删除map.delete(&apos;a&apos;);</div><div class="line"></div><div class="line">要想去遍历或者说使用了这个map对象，一定要注意要用for of不要用for in</div></pre></td></tr></table></figure><blockquote><p>箭头函数<br>    es6的箭头函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">伪代码   function add(x)&#123;&#125;    ======&gt; var add = (x)=&gt;&#123;&#125; add()</div><div class="line"></div><div class="line">var add = (x) =&gt; &#123;</div><div class="line">    return x</div><div class="line">&#125;</div><div class="line">ps:ES6的简写也能出现效果如下，注意的是有return的时候可以这么写</div><div class="line">var add = x=&gt;x;</div><div class="line">alert(add(40));</div><div class="line"></div><div class="line">应用小demo：</div><div class="line">box.click = ()=&gt;&#123;alert(&apos;123&apos;)&#125;;</div><div class="line">注意: 使用箭头函数 要注意两个点</div><div class="line">1. 会改变this的指向  它指向了window对象;</div><div class="line">    var name = &apos;张琳&apos;;</div><div class="line">    var person = &#123;</div><div class="line">        name: &apos;焦🐑&apos;,</div><div class="line">        age: 2,</div><div class="line">        fav: () =&gt; &#123;</div><div class="line">            // 使用箭头函数 会改变this的指向  它指向了window对象</div><div class="line"></div><div class="line">            console.log(this);</div><div class="line">            console.log(`$&#123;this.name&#125;喜欢打王者荣耀`);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    person.fav();//this.name指向window下的name，会打印出张琳喜欢打王者荣耀</div><div class="line">2. 使用箭头函数 arguments就不能使用</div><div class="line">var person2 = &#123;</div><div class="line">        name: &apos;焦🐑&apos;,</div><div class="line">        age: 2,</div><div class="line">        fav: () =&gt; &#123;</div><div class="line">使用箭头函数 arguments就不能使用</div><div class="line">            console.log(arguments);//报错arguments is not defined</div><div class="line">            console.log(`$&#123;this.name&#125;喜欢打王者荣耀`);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    person2.fav(1,2,3,4);</div></pre></td></tr></table></figure><blockquote><p>ES6中对象的写法，使用箭头函数要想打印对象里的属性值 是不可行的，那么我们可以使用对象的<strong>单体模式模式</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fav()&#123;&#125;对象的单体模式写法 ===等同于ES5写法===&gt; fav:function()&#123;&#125;</div><div class="line">var person = &#123;</div><div class="line">name:&apos;kk仔&apos;,</div><div class="line">age:20,</div><div class="line">fav()&#123;</div><div class="line">alert(this.name);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">person.fav();</div></pre></td></tr></table></figure><blockquote><p>面向对象的三个特性 : 封装 继承(所谓继承,即继承父类的属性和方法,同样它还可以拥有自己的属性和方法)  多态</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">es5中 构造函数  创建对象的写法</div><div class="line">function Person(name,age)&#123;</div><div class="line">this.name = name;</div><div class="line">this.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.showName = function()&#123;</div><div class="line">console.log(this.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.showAge = function()&#123;</div><div class="line">console.log(this.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var p =  new Person(&apos;焦🐑&apos;,18);</div><div class="line">p.showName();</div><div class="line">ps：比如说，上面这个构造函数Person，在下面new了这个Person之后我们可以称为这个Person对象就是一个类，所谓一个类呢，就是一个对象。</div><div class="line"></div><div class="line">而ES6中构造函数  创建对象的写法 是这样写的</div><div class="line">在大括号里面可以定义它自己想要的属性和方法，要想定义属性必须使用constructor方法</div><div class="line">class Person&#123;</div><div class="line">//在new了一个Person之后，constructor方法会自动调用（自己调用自己一次）就创建了一个实例，说白了就是一个对象</div><div class="line">constructor（name,age）&#123;</div><div class="line">this.name = name;</div><div class="line">this.age = age;</div><div class="line">&#125;</div><div class="line">//如果要写方法的话必须要使用对象的单体模式写比如说：</div><div class="line">showName()&#123;</div><div class="line">console.log(this.name);</div><div class="line">&#125;</div><div class="line">showAge()&#123;</div><div class="line">console.log(this.age);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">new p1 = new Person(&apos;朱博宇&apos;,16);</div><div class="line"></div><div class="line">验证：console.log(p1.constructor === Person)//返回true</div><div class="line">prototype 对应的对象中， 有一个天生自带的属性叫做constructor, （构造函数），这个属性的属性值指向的是当前函数本身。</div></pre></td></tr></table></figure><blockquote><p>承接上面的例子，面向对象的继承</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class student extends Person&#123;</div><div class="line">//继承 既继承属性 又继承方法  并且也有属于自己的属性和方法</div><div class="line">constructor(name,age,fav)&#123;</div><div class="line">//子类一旦用到了继承 constructor和super()同时存在的</div><div class="line">//super方法是为了继承父类的属性</div><div class="line">super(name,age);</div><div class="line">this.fav = fav;</div><div class="line">&#125;</div><div class="line">showFav()&#123;</div><div class="line">console.log(&apos;前端&apos;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">var p = new Person(&apos;张三&apos;,19);</div><div class="line">p.showFav();//报错：p.showFav() is not a function</div><div class="line">父级不能调用子级的方法，子级可以调用父级的方法，为啥，因为继承嘛！~</div><div class="line">var s = Student(&apos;李斯&apos;,20);</div><div class="line">s.showName();//证明s继承了父级的方法</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在es6中是用let声明变量的 跟var类似 跟var的区别在于let只在它的代码块中有效&lt;br&gt;一个大括号 就是一个代码块==&amp;gt;作用域 在es5中 代码块中声明的变量在任何地方都能取到&lt;br&gt;let 的应用场景一般是用在for循环中比较有用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://Savingss.github.io/2017/09/12/hello-world/"/>
    <id>http://Savingss.github.io/2017/09/12/hello-world/</id>
    <published>2017-09-12T06:24:46.150Z</published>
    <updated>2017-09-12T06:24:46.151Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
